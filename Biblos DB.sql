CREATE DATABASE BIBLOS
USE BIBLOS
GO

/*TABLES*/
CREATE TABLE GENRE
(
	ID INT PRIMARY KEY IDENTITY,
	_NAME VARCHAR(50) UNIQUE
)

CREATE TABLE AUTOR
(
	ID INT PRIMARY KEY IDENTITY,
	_NAME VARCHAR(50)
)

CREATE TABLE USERS
(
	ID INT PRIMARY KEY IDENTITY,
	NAME_USER VARCHAR (50) NOT NULL,
	AGE INT NOT NULL,
	_ADDRESS VARCHAR(100) NOT NULL,
	EMAIL VARCHAR (50) UNIQUE NOT NULL,
	_PASSWORD VARCHAR (15) NOT NULL,
	_ROLE VARCHAR (10) NOT NULL 
)

CREATE TABLE BOOK
(
	ID INT PRIMARY KEY IDENTITY,
	TITLE VARCHAR (100) NOT NULL,
	_DESCRIPTION VARCHAR (MAX),
	GENRE INT FOREIGN KEY REFERENCES GENRE(ID) NOT NULL ,
	YEAR_PUBLICATION VARCHAR (4),
	_LANGUAGE VARCHAR (20) NOT NULL,
	READERS_AGE INT NOT NULL,
	AUTOR INT FOREIGN KEY REFERENCES AUTOR(ID) NOT NULL,
	COVER_PAGE VARCHAR(100),
	QUANTITY INT DEFAULT(0),
	PRECIO FLOAT NOT NULL
)

CREATE TABLE SALES
(
	ID INT PRIMARY KEY IDENTITY,
	CLIENT INT FOREIGN KEY REFERENCES USERS(ID) NOT NULL,
	BOOK INT FOREIGN KEY REFERENCES BOOK(ID) NOT NULL,
	QUANTITY INT DEFAULT(1),
	TOTAL_AMOUNT FLOAT NOT NULL,
	DATE_SALE DATE NOT NULL
)

/*PROCEDURES*/
CREATE PROCEDURE ADD_SALE
	@CLIENT INT,
	@BOOK INT,
	@QUANTITY INT,
	@DATE_SALE DATE
AS
DECLARE 
	@TOTAL_AMOUNT FLOAT
SET
	@TOTAL_AMOUNT = (SELECT PRECIO FROM BOOK WHERE ID = @BOOK) * @QUANTITY

INSERT INTO SALES VALUES (@CLIENT, @BOOK, @QUANTITY, @TOTAL_AMOUNT, @DATE_SALE)	
GO

CREATE PROCEDURE GET_BOOKS
AS
SELECT B.ID,
	B.TITLE,
	B._DESCRIPTION,
	G._NAME AS GENRE,
	B.YEAR_PUBLICATION,
	B._LANGUAGE,
	B.READERS_AGE,
	A._NAME AS AUTOR,
	B.COVER_PAGE,
	B.QUANTITY,
	B.PRECIO
	FROM BOOK B
	INNER JOIN GENRE G ON B.GENRE = G.ID
	INNER JOIN AUTOR A ON B.AUTOR = A.ID
GO

CREATE PROCEDURE GET_ONE_BOOK
	@ID INT
AS
SELECT B.ID,
	B.TITLE,
	B._DESCRIPTION,
	G._NAME AS GENRE,
	B.YEAR_PUBLICATION,
	B._LANGUAGE,
	B.READERS_AGE,
	A._NAME AS AUTOR,
	B.COVER_PAGE,
	B.QUANTITY,
	B.PRECIO
	FROM BOOK B
	INNER JOIN GENRE G ON B.GENRE = G.ID
	INNER JOIN AUTOR A ON B.AUTOR = A.ID
	WHERE B.ID = @ID
GO

CREATE PROCEDURE GET_SALES
AS
	SELECT S.ID,
	U.NAME_USER AS CLIENT,
	B.TITLE,
	S.QUANTITY,
	S.TOTAL_AMOUNT,
	S.DATE_SALE
	FROM SALES S
	INNER JOIN USERS U ON S.CLIENT = U.ID
	INNER JOIN BOOK B ON S.BOOK = B.ID
	ORDER BY B.TITLE ASC
GO

CREATE PROCEDURE GET_ONE_SALE
@ID INT
AS
	SELECT S.ID,
	U.NAME_USER AS CLIENT,
	B.TITLE,
	S.QUANTITY,
	S.TOTAL_AMOUNT,
	S.DATE_SALE
	FROM SALES S
	INNER JOIN USERS U ON S.CLIENT = U.ID
	INNER JOIN BOOK B ON S.BOOK = B.ID
	WHERE S.ID = @ID
GO

CREATE PROCEDURE SELL_BOOK
	@QUANTITY_BOOKS INT,
	@ID INT
AS
DECLARE
	@NEW_QUANTITY INT,
	@ACTUAL_QUANTITY INT
SET
	@ACTUAL_QUANTITY = (SELECT QUANTITY FROM BOOK WHERE ID = @ID)
SET	
	@NEW_QUANTITY = @ACTUAL_QUANTITY - @QUANTITY_BOOKS

UPDATE BOOK
	SET QUANTITY = @NEW_QUANTITY
	WHERE ID = @ID
GO
	
CREATE PROCEDURE GET_POPULAR_BOOKS
AS
SELECT TOP 12 B.ID,
	B.TITLE,
	B._DESCRIPTION,
	G._NAME AS GENRE,
	B.YEAR_PUBLICATION,
	B._LANGUAGE,
	B.READERS_AGE,
	A._NAME AS AUTOR,
	B.COVER_PAGE,
	B.QUANTITY,
	B.PRECIO,
	COUNT(S.BOOK) AS TOTAL_VENTAS
	FROM BOOK B
	INNER JOIN GENRE G ON B.GENRE = G.ID
	INNER JOIN AUTOR A ON B.AUTOR = A.ID
	INNER JOIN SALES S ON S.BOOK = B.ID
	GROUP BY B.TITLE, G._NAME, A._NAME,B.READERS_AGE,B.YEAR_PUBLICATION, B._LANGUAGE, B.PRECIO,B.ID, B._DESCRIPTION, B.COVER_PAGE, B.QUANTITY
	ORDER BY TOTAL_VENTAS DESC
GO

CREATE PROCEDURE GET_BOOKS_BY_GENRE
	@GENRE INT 
AS
	SELECT B.ID,
	B.TITLE,
	B._DESCRIPTION,
	G._NAME AS GENRE,
	B.YEAR_PUBLICATION,
	B._LANGUAGE,
	B.READERS_AGE,
	A._NAME AS AUTOR,
	B.COVER_PAGE,
	B.QUANTITY,
	B.PRECIO
	FROM BOOK B
	INNER JOIN GENRE G ON B.GENRE = G.ID
	INNER JOIN AUTOR A ON B.AUTOR = A.ID
	WHERE B.GENRE = @GENRE
GO

CREATE PROCEDURE GET_SALE_BY_BOOK
	@BOOK INT
AS
	SELECT S.ID,
	U.NAME_USER AS CLIENT,
	B.TITLE,
	S.QUANTITY,
	S.TOTAL_AMOUNT,
	S.DATE_SALE
	FROM SALES S
	INNER JOIN USERS U ON S.CLIENT = U.ID
	INNER JOIN BOOK B ON S.BOOK = B.ID
	WHERE S.BOOK = @BOOK
	ORDER BY S.DATE_SALE
GO

CREATE PROCEDURE GET_SALES_BY_DAY
	@DATE DATE
AS
	SELECT S.ID,
	U.NAME_USER AS CLIENT,
	B.TITLE,
	S.QUANTITY,
	S.TOTAL_AMOUNT,
	S.DATE_SALE
	FROM SALES S
	INNER JOIN USERS U ON S.CLIENT = U.ID
	INNER JOIN BOOK B ON S.BOOK = B.ID
	WHERE S.DATE_SALE = @DATE
GO

CREATE PROCEDURE GET_MOST_SOLD_BOOK
	@DATE DATE
AS
	SELECT TOP 1 
	B.ID,
	B.TITLE,
	B._DESCRIPTION,
	G._NAME AS GENRE,
	B.YEAR_PUBLICATION,
	B._LANGUAGE,
	B.READERS_AGE,
	A._NAME AS AUTOR,
	B.COVER_PAGE,
	B.QUANTITY,
	B.PRECIO,
	COUNT(S.BOOK) AS TOTAL_VENTAS
	FROM BOOK B
	INNER JOIN GENRE G ON B.GENRE = G.ID
	INNER JOIN AUTOR A ON B.AUTOR = A.ID
	INNER JOIN SALES S ON S.BOOK = B.ID
	WHERE S.DATE_SALE = @DATE
	GROUP BY B.TITLE, G._NAME, A._NAME,B.READERS_AGE,B.YEAR_PUBLICATION, B._LANGUAGE, B.PRECIO,B.ID, B._DESCRIPTION, B.COVER_PAGE, B.QUANTITY
	ORDER BY TOTAL_VENTAS DESC
GO

CREATE PROCEDURE GET_LESS_SOLD_BOOK
	@DATE DATE
AS
	SELECT TOP 1 
	B.ID,
	B.TITLE,
	B._DESCRIPTION,
	G._NAME AS GENRE,
	B.YEAR_PUBLICATION,
	B._LANGUAGE,
	B.READERS_AGE,
	A._NAME AS AUTOR,
	B.COVER_PAGE,
	B.QUANTITY,
	B.PRECIO,
	COUNT(S.BOOK) AS TOTAL_VENTAS
	FROM BOOK B
	INNER JOIN GENRE G ON B.GENRE = G.ID
	INNER JOIN AUTOR A ON B.AUTOR = A.ID
	INNER JOIN SALES S ON S.BOOK = B.ID
	WHERE S.DATE_SALE = @DATE
	GROUP BY B.TITLE, G._NAME, A._NAME,B.READERS_AGE,B.YEAR_PUBLICATION, B._LANGUAGE, B.PRECIO,B.ID, B._DESCRIPTION, B.COVER_PAGE, B.QUANTITY
	ORDER BY TOTAL_VENTAS ASC
GO




